original backend
from flask import Flask, render_template, request, redirect, url_for
import sqlite3
import datetime

baseurl = "/smartcities"
app = Flask(__name__, static_url_path=baseurl)

# Function to connect to the database
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

# Create the database and table if it doesn't exist
def init_db():
    conn = get_db_connection()
    conn.execute('''
        CREATE TABLE IF NOT EXISTS entries (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            start TEXT NOT NULL, 
            end TEXT, 
            time INTEGER
        )
    ''')
    conn.commit()
    conn.close()

@app.route(baseurl + '/', methods=['GET', 'POST'])
def index():
    init_db()
    if request.method == 'POST':
        name = request.form['name']
        now = datetime.datetime.now()
        now = now.strftime('%Y-%m-%d %H:%M:%S')


        conn = get_db_connection()

        repeat = conn.execute('SELECT * FROM entries WHERE name = (?) AND end IS NULL', (name,)).fetchone()
        if(repeat): 
            return "Someone has already entered that name! "

        conn.execute('INSERT INTO entries (name, start) VALUES (?, ?)', (name, now))
        conn.commit()
        conn.close()
        

        return redirect(url_for('timer', name=name))
    

    conn = get_db_connection()
    entries = conn.execute('SELECT * FROM entries ORDER BY time ASC').fetchall()
    conn.close()
    
    return render_template('index.html', entries=entries[:10])

@app.route(baseurl + '/timer/<name>', methods=['GET'])
def timer(name):
    conn = get_db_connection()
    entry = conn.execute('SELECT * FROM entries WHERE name = (?) AND end IS NULL', (name,)).fetchone()
    conn.close()
    
    if not entry:
        return "No active timer found for this user."

    return render_template('timer.html', name=name, start_time=entry['start'])

@app.route(baseurl + '/finish', methods=['GET', 'POST'])
def finish():
    init_db()
    now = datetime.datetime.now()
    now = now.strftime('%Y-%m-%d %H:%M:%S')

    if request.method == "POST": 
        name = request.form['name']
        conn = get_db_connection()
        exist = conn.execute('SELECT * FROM entries WHERE name = (?) AND end IS NULL', (name,)).fetchone()
        if(not exist):
            return "Sorry, you need to make a new account after you've finished before! "

        start_time = conn.execute('SELECT * FROM entries WHERE name = (?) AND end IS NULL', (name,)).fetchone()
        start_time = start_time[2]
        start = datetime.datetime.strptime(start_time, "%Y-%m-%d %H:%M:%S")
        now = datetime.datetime.strptime(now, "%Y-%m-%d %H:%M:%S")
        c = now - start
        time = c.total_seconds()
        conn.execute('UPDATE entries SET time = (?), end = (?) WHERE name = (?) AND end IS NULL', (time, now, name, ))
        rank = conn.execute('''
        SELECT 
            (SELECT COUNT(*) 
            FROM entries AS e2 
            WHERE e2.time <= e1.time) as row_number, 
            e1.*
        FROM entries AS e1
        WHERE end = ?
        ORDER BY time
        ''', (now,)).fetchone()
        rank = rank[0]
        conn.commit()
        conn.close()
        rank = str(rank)
        print(type(time))
        return redirect(url_for('end', rank=rank, sec=time))
        
    conn = get_db_connection()
    entries = conn.execute('SELECT * FROM entries ORDER BY time ASC').fetchall()
    conn.close()

    return render_template('finish.html', entries=entries[:10])

@app.route(baseurl + '/end/<int:rank>/<int:sec>')
def end(rank, sec):
    def calculate_carbon_emissions(time_minutes):
    # Calculate distance based on time and average speed
        distance_km = (time_minutes / 60) * 30
    
    # Calculate carbon emissions for the trip
        carbon_emissions = distance_km * 0.2
        return carbon_emissions

    carbon = calculate_carbon_emissions(sec)
    carbon = round(carbon, 0)
    return render_template('end.html', rank=rank, carbon=carbon)

@app.route(baseurl + '/rank')
def rank():
    init_db()
    conn = get_db_connection()
    entries = conn.execute('SELECT * FROM entries ORDER BY time ASC').fetchall()
    conn.close()
    
    return render_template('rank.html', entries=entries)

if __name__ == '__main__':
    init_db()  
    app.run(debug=True)

finish page
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='styles/finish.css') }}">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=DM+Serif+Text:ital@0;1&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap" rel="stylesheet">
    <title>Flask SQLite App</title>
    <style>
        .background-image {
            background-image: url('{{ url_for("static", filename="images/bkg1.png") }}');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            height: 500px; /* Set a height for the element */
            color: white;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="background-image">
            <img src="images/logo.png" alt="ISF Logo">
            <h1 class="fade-in ubuntu-regular">Finishing Page</h1>
            <h2 class="slide-in ubuntu-regular">Finish your timer by clicking "finish" next to your name! !</h2>
            <h2><a href="{{ url_for('rank') }}"><button>Go to Full Ranking</button></a></h2>
        </div>

        <h2 class="slide-in ubuntu-regular">Current Entries</h2>
        <div class="table">
        <table class="ubuntu-regular">
            <thead>
                <tr class="top">
                    <th>Name</th>
                    <th>Total Seconds</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
            {% for entry in entries %}
                <tr class="table-row">
                    <td>{{ entry['name'] }}</td>
                    <td>{{ entry['time'] // 60 }}:{{ entry['time'] % 60 }}</td>
                    <td>
                        <form method="POST" action="{{ url_for('finish') }}">
                            <input type="hidden" name="name" value="{{ entry['name'] }}">
                            <button type="submit" class="button">Finish</button>
                        </form>
                    </td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </div>

    </div>
</body>
</html>